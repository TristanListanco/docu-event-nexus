
import { useState, useCallback, useEffect } from "react";
import { useStaff } from "@/hooks/use-staff";
import { useEvents } from "@/hooks/events/use-events";
import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Switch } from "@/components/ui/switch";
import { Separator } from "@/components/ui/separator";
import { toast } from "@/hooks/use-toast";
import { Event, EventType } from "@/types/models";
import MultiStaffSelector from "./multi-staff-selector";
import { Calendar, Clock, MapPin, User, Tag, AlertCircle } from "lucide-react";
import { Card, CardContent } from "@/components/ui/card";

interface AddEventDialogProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  onEventAdded: () => void;
}

// Form state interface for better type safety
interface FormState {
  name: string;
  date: string;
  startTime: string;
  endTime: string;
  location: string;
  organizer: string;
  type: EventType;
  videographerIds: string[];
  photographerIds: string[];
  ignoreScheduleConflicts: boolean;
  ccsOnlyEvent: boolean;
  sendEmailNotifications: boolean;
}

const initialFormState: FormState = {
  name: "",
  date: "",
  startTime: "",
  endTime: "",
  location: "",
  organizer: "",
  type: "General",
  videographerIds: [],
  photographerIds: [],
  ignoreScheduleConflicts: false,
  ccsOnlyEvent: false,
  sendEmailNotifications: true,
};

// Storage key for form persistence
const FORM_STORAGE_KEY = 'add-event-form-data';

export default function AddEventDialog({ open, onOpenChange, onEventAdded }: AddEventDialogProps) {
  const { staff, loading: staffLoading } = useStaff();
  const { addEvent } = useEvents();

  // Form state - initialize from localStorage if available
  const [formState, setFormState] = useState<FormState>(() => {
    if (typeof window !== 'undefined') {
      const saved = localStorage.getItem(FORM_STORAGE_KEY);
      if (saved) {
        try {
          return { ...initialFormState, ...JSON.parse(saved) };
        } catch {
          return initialFormState;
        }
      }
    }
    return initialFormState;
  });

  const [isSubmitting, setIsSubmitting] = useState(false);

  // Save form state to localStorage whenever it changes
  useEffect(() => {
    if (typeof window !== 'undefined' && open) {
      localStorage.setItem(FORM_STORAGE_KEY, JSON.stringify(formState));
    }
  }, [formState, open]);

  // Helper function to update form state
  const updateFormState = useCallback((updates: Partial<FormState>) => {
    setFormState(prev => ({ ...prev, ...updates }));
  }, []);

  const resetForm = useCallback(() => {
    setFormState(initialFormState);
    setIsSubmitting(false);
    if (typeof window !== 'undefined') {
      localStorage.removeItem(FORM_STORAGE_KEY);
    }
  }, []);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (isSubmitting) return;

    try {
      setIsSubmitting(true);

      if (!formState.name || !formState.date || !formState.startTime || !formState.endTime || !formState.location) {
        toast({
          title: "Missing Fields",
          description: "Please fill in all required fields.",
          variant: "destructive",
        });
        return;
      }

      const eventData: Omit<Event, "id" | "videographers" | "photographers"> = {
        name: formState.name,
        logId: "", // Will be generated by the hook
        date: formState.date,
        startTime: formState.startTime,
        endTime: formState.endTime,
        location: formState.location,
        organizer: formState.organizer || null,
        type: formState.type,
        status: "Upcoming",
        ignoreScheduleConflicts: formState.ignoreScheduleConflicts,
        ccsOnlyEvent: formState.ccsOnlyEvent,
        isBigEvent: false,
        bigEventId: null
      };

      await addEvent(
        eventData,
        formState.videographerIds,
        formState.photographerIds,
        formState.sendEmailNotifications
      );

      resetForm();
      onOpenChange(false);
      onEventAdded();
    } catch (error) {
      console.error("Error adding event:", error);
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleOpenChange = (newOpen: boolean) => {
    if (!newOpen && !isSubmitting) {
      // Only clear form if user explicitly closes or cancels
      // Don't clear on accidental closes due to re-renders
    }
    onOpenChange(newOpen);
  };

  return (
    <Dialog open={open} onOpenChange={handleOpenChange}>
      <DialogContent className="max-w-4xl max-h-[90vh] overflow-y-auto animate-fade-in">
        <DialogHeader className="animate-slide-in-right">
          <DialogTitle className="flex items-center gap-2 text-xl font-semibold">
            <Calendar className="h-5 w-5 text-primary" />
            Add New Event
          </DialogTitle>
        </DialogHeader>

        <form onSubmit={handleSubmit} className="space-y-6 animate-fade-in-up">
          {/* Basic Information */}
          <Card className="animate-fade-in-up">
            <CardContent className="p-6 space-y-4">
              <div className="flex items-center gap-2 mb-4">
                <Tag className="h-4 w-4 text-primary" />
                <h3 className="font-medium">Basic Information</h3>
              </div>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="name">Event Name *</Label>
                  <Input
                    id="name"
                    value={formState.name}
                    onChange={(e) => updateFormState({ name: e.target.value })}
                    placeholder="Enter event name"
                    required
                  />
                </div>
                
                <div className="space-y-2">
                  <Label htmlFor="type">Event Type *</Label>
                  <Select value={formState.type} onValueChange={(value) => updateFormState({ type: value as EventType })}>
                    <SelectTrigger>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="General">General</SelectItem>
                      <SelectItem value="SPECOM">SPECOM</SelectItem>
                      <SelectItem value="LITCOM">LITCOM</SelectItem>
                      <SelectItem value="CUACOM">CUACOM</SelectItem>
                      <SelectItem value="SPODACOM">SPODACOM</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>

              <div className="space-y-2">
                <Label htmlFor="organizer">Organizer</Label>
                <div className="relative">
                  <User className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground" />
                  <Input
                    id="organizer"
                    value={formState.organizer}
                    onChange={(e) => updateFormState({ organizer: e.target.value })}
                    placeholder="Enter organizer name"
                    className="pl-10"
                  />
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Date & Time */}
          <Card className="animate-fade-in-up">
            <CardContent className="p-6 space-y-4">
              <div className="flex items-center gap-2 mb-4">
                <Clock className="h-4 w-4 text-primary" />
                <h3 className="font-medium">Date & Time</h3>
              </div>
              
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="date">Date *</Label>
                  <Input
                    id="date"
                    type="date"
                    value={formState.date}
                    onChange={(e) => updateFormState({ date: e.target.value })}
                    required
                  />
                </div>
                
                <div className="space-y-2">
                  <Label htmlFor="startTime">Start Time *</Label>
                  <Input
                    id="startTime"
                    type="time"
                    value={formState.startTime}
                    onChange={(e) => updateFormState({ startTime: e.target.value })}
                    required
                  />
                </div>
                
                <div className="space-y-2">
                  <Label htmlFor="endTime">End Time *</Label>
                  <Input
                    id="endTime"
                    type="time"
                    value={formState.endTime}
                    onChange={(e) => updateFormState({ endTime: e.target.value })}
                    required
                  />
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Location */}
          <Card className="animate-fade-in-up">
            <CardContent className="p-6 space-y-4">
              <div className="flex items-center gap-2 mb-4">
                <MapPin className="h-4 w-4 text-primary" />
                <h3 className="font-medium">Location</h3>
              </div>
              
              <div className="space-y-2">
                <Label htmlFor="location">Location *</Label>
                <Textarea
                  id="location"
                  value={formState.location}
                  onChange={(e) => updateFormState({ location: e.target.value })}
                  placeholder="Enter event location"
                  required
                  rows={2}
                />
              </div>
            </CardContent>
          </Card>

          {/* Staff Assignment */}
          <Card className="animate-fade-in-up">
            <CardContent className="p-6 space-y-4">
              <div className="flex items-center gap-2 mb-4">
                <User className="h-4 w-4 text-primary" />
                <h3 className="font-medium">Staff Assignment</h3>
              </div>
              
              <div className="space-y-4">
                <MultiStaffSelector
                  role="Videographer"
                  availableStaff={staff}
                  selectedStaffIds={formState.videographerIds}
                  onSelectionChange={(ids) => updateFormState({ videographerIds: ids })}
                  maxSelection={3}
                  disabled={staffLoading}
                  excludeStaffIds={formState.photographerIds}
                />
                
                <MultiStaffSelector
                  role="Photographer"
                  availableStaff={staff}
                  selectedStaffIds={formState.photographerIds}
                  onSelectionChange={(ids) => updateFormState({ photographerIds: ids })}
                  maxSelection={3}
                  disabled={staffLoading}
                  excludeStaffIds={formState.videographerIds}
                />
              </div>
            </CardContent>
          </Card>

          {/* Options */}
          <Card className="animate-fade-in-up">
            <CardContent className="p-6 space-y-4">
              <div className="flex items-center gap-2 mb-4">
                <AlertCircle className="h-4 w-4 text-primary" />
                <h3 className="font-medium">Options</h3>
              </div>
              
              <div className="space-y-4">
                <div className="flex items-center justify-between">
                  <div className="space-y-0.5">
                    <Label>Ignore Schedule Conflicts</Label>
                    <p className="text-sm text-muted-foreground">
                      Allow assignment even if staff has scheduling conflicts
                    </p>
                  </div>
                  <Switch
                    checked={formState.ignoreScheduleConflicts}
                    onCheckedChange={(checked) => updateFormState({ ignoreScheduleConflicts: checked })}
                  />
                </div>

                <Separator />

                <div className="flex items-center justify-between">
                  <div className="space-y-0.5">
                    <Label>CCS Only Event</Label>
                    <p className="text-sm text-muted-foreground">
                      Show only CCS staff members for assignment
                    </p>
                  </div>
                  <Switch
                    checked={formState.ccsOnlyEvent}
                    onCheckedChange={(checked) => updateFormState({ ccsOnlyEvent: checked })}
                  />
                </div>

                <Separator />

                <div className="flex items-center justify-between">
                  <div className="space-y-0.5">
                    <Label>Send Email Notifications</Label>
                    <p className="text-sm text-muted-foreground">
                      Notify assigned staff via email
                    </p>
                  </div>
                  <Switch
                    checked={formState.sendEmailNotifications}
                    onCheckedChange={(checked) => updateFormState({ sendEmailNotifications: checked })}
                  />
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Submit Button */}
          <div className="flex justify-end gap-3 pt-4 animate-fade-in-up">
            <Button
              type="button"
              variant="outline"
              onClick={() => {
                resetForm();
                handleOpenChange(false);
              }}
              disabled={isSubmitting}
            >
              Cancel
            </Button>
            <Button
              type="submit"
              disabled={isSubmitting}
              className="hover-scale"
            >
              {isSubmitting ? "Creating..." : "Create Event"}
            </Button>
          </div>
        </form>
      </DialogContent>
    </Dialog>
  );
}
